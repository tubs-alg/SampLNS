[benchmark]
# the instances to be used for the benchmark
instance_names = [
    "calculate",
    "lcm",
    "email",
    "ChatClient",
    "toybox_2006-10-31_23-30-06",
    "car",
    "FeatureIDE",
    "FameDB",
    "APL",
    "SafeBali",
    "TightVNC",
    "APL-Model",
    "gpl",
    "SortingLine",
    "dell",
    "PPU",
    "berkeleyDB1",
    "axTLS",
    "Violet",
    "berkeleyDB2",
    "soletta_2015-06-26_18-38-56",
    "BattleofTanks",
    "BankingSoftware",
    "fiasco_2017-09-26_11-30-56",
    "fiasco_2020-12-01_14-09-14",
    "uclibc_2008-06-05_13-46-47",
    "uclibc_2020-12-24_11-54-53",
    "E-Shop",
    "toybox_2020-12-06_00-02-46",
    "DMIE",
    "soletta_2017-03-09_21-02-40",
    "busybox_2007-01-24_09-14-09",
    "fs_2017-05-22",
    "WaterlooGenerated",
    "financial_services",
    "busybox-1_18_0",
    "busybox-1_29_2",
    "busybox_2020-12-16_21-53-05",
    "am31_sim",
    "EMBToolkit",
    "atlas_mips32_4kc",
    "eCos-3-0_i386pc",
    "integrator_arm7",
    "XSEngine",
    "aaed2000",
    "FreeBSD-8_0_0",
    "ea2468",
#    "Automotive01",
#    "main_light",
#    "freetz",
]

# The zip file with the benchmark instances
instance_archive = "./benchmark_models.zip"

# The workstation generation to be used for the experiments
workstation_generation = "alggen05"

[00_baseline]
# This experiment provides results from the baseline algorithms.
# This is necessary to compare how good SampLNS is compared to existing algorithms
subfolder = "./00_baseline"
external_computed_samples = "INPUT/baseline.zip"
sample_table = "OUTPUT/baseline_samples.json.xz"
baseline_table = "OUTPUT/baseline_results.json.xz"

[01_yasa_15min]
subfolder = "./01_yasa_15min"
result_folder = "DATA/results"
# Table with samples to check for correctness
sample_table = "OUTPUT/samples.json.xz"
# Only the basic information about the results
result_table = "OUTPUT/results.json.xz"

[02_samplns_15min]
subfolder = "./02_samplns_15min"
# maximal number of LNS iterations. Set to a very high limit that will never be reached.
iterations = 10_000
# Time limit for each iteration
iteration_time_limit = 60.0
# Overall time limit
time_limit = 900
# Logging all data to this folder using algbench.
algbench_results = "DATA/algbench"
# Table containing only the most basic information quick parsing
result_table = "OUTPUT/results.json.xz"
# Table containing more information for deeper analysis but also expensive to read
iteration_info = "OUTPUT/results_with_iteration_infos.json.xz"
# Table extending the result table by the time of the last update
result_table_with_last_update = "OUTPUT/result_with_last_update_time.json.xz"

[03_samplns_3h]
# This experiments tries to compute optimal lower and upper bounds to
# 1. Investigate how close the 15min SampLNS gets to the optimum (for the cases were it is not optimal)
# 2. Show the potential of the technique when given more resources (or after further tuning)
subfolder = "./03_samplns_3h"
# maximal number of LNS iterations. Set to a very high limit that will never be reached.
iterations = 10_000
# Time limit for each iteration
iteration_time_limit = 180.0
cds_iteration_time_limit = 180.0
# Overall time limit
time_limit = 10_800
# Logging all data to this folder using algbench.
algbench_results = "DATA/algbench"
# Table containing only the most basic information quick parsing
result_table = "OUTPUT/results.json.xz"
# Table containing more information for deeper analysis but also expensive to read
iteration_info = "OUTPUT/results_with_iteration_infos.json.xz"
# Table extending the result table by the time of the last update
result_table_with_last_update = "OUTPUT/result_with_last_update_time.json.xz"

[04_compare]
[04_compare.input]
baseline_algs = "00_baseline/OUTPUT/baseline_results.json.xz"
yasa_15min = "01_yasa_15min/OUTPUT/results.json.xz"
samplns_15min = "02_samplns_15min/OUTPUT/result_with_last_update_time.json.xz"
samplns_3h = "03_samplns_3h/OUTPUT/result_with_last_update_time.json.xz"
[04_compare.output]
baseline_data = "OUTPUT/baseline_data.json.xz"
instance_infos = "OUTPUT/instance_data.json.xz"
aggregated_table = "OUTPUT/aggregated_table.json.xz"
boxplot_lb = "OUTPUT/boxplot_lb.pdf"
